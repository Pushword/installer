#!/bin/bash

# Use it :
# ./install-cms ./my-folder

# Bash script relative lines
: ${1?failure: in wich folder should i work ?}
folder=$1
echo "Installation running in folder $folder"

# First clean the folder where we will install
rm -rf ${folder}

# Install symfony
composer create-project symfony/skeleton ${folder}  ^5.2
cd ${folder}

# Set in french and add the database :)
#sed -i -e "s/parameters:/parameters:\n    locale: 'fr'\n    database: '%env(resolve:DATABASE_URL)%'/" config/services.yaml

# Work around because we prepend our config in the bundle
#sed -i -e "/Pushword\\\Core\\\PushwordCoreBundle::class => \['all' => true\],/d" config/bundles.php
#sed -i -e "s/return \[/return \[\n    Pushword\\\Core\\\PushwordCoreBundle::class => \['all' => true\],/" config/bundles.php

composer require pushword/installer
sed -i -e 's/"scripts": {/"scripts": {\n        "post-package-install": \[\n            "Pushword\\\\\Installer\\\\\PostInstall::postPackageInstall"\n        ],/' composer.json
sed -i -e 's/"post-update-cmd": \[/"post-update-cmd": \[\n            "Pushword\\\\\Installer\\\\\PostInstall::beforeCacheClear",/' composer.json


# Avoid an error because Pushword prepend security config
# rm config/packages/security.yaml
# rm doctrine.yaml framework.yaml liip_imagine.yaml  translation.yaml twig.yaml vich_uploader.yaml
# rm assets.yaml security.yaml
# cd ../../

# Get Pushword
composer require pushword/core
composer require pushword/admin
composer require pushword/skeleton --dev

rm config/packages/sonata_admin.yaml

# We copy pushword config to easily edit it later manually
cp vendor/pushword/skeleton/src/Resources/config/packages/pushword.yaml config/packages/pushword.yaml

php bin/console cache:clear

# Create default Entity
mkdir src/Entity
cp -R vendor/pushword/skeleton/src/Entity/. src/Entity

# Copy assets
#mkdir -p assets
#cp vendor/piedweb/cms-bundle/assets/.babelrc .babelrc
#cp vendor/piedweb/cms-bundle/assets/package.json package.json
#cp vendor/piedweb/cms-bundle/assets/webpack.config.js webpack.config.js

# read -p "Install full featured template (else simple) ? [Y/n] " -n 1 -r
# if [[ $REPLY =~ ^[Yy]$ ]]
# then
#     #todo !!!
#     cp vendor/piedweb/cms-bundle/assets/main.js assets/main.js
#     cp vendor/piedweb/cms-bundle/assets/main.scss assets/main.scss
# else
#     cp vendor/piedweb/cms-bundle/assets/main.js assets/main.js
#     cp vendor/piedweb/cms-bundle/assets/main.scss assets/main.scss
# fi

#cp -r vendor/piedweb/cms-bundle/assets/icons assets/

# Copy the two files from default theme you will want to personnalize
#cp vendor/piedweb/cms-bundle/src/Resources/views/page/_menu.html.twig templates/bundles/PushwordCoreBundle/page/_menu.html.twig
#cp vendor/piedweb/cms-bundle/src/Resources/views/page/_footer.html.twig templates/bundles/PushwordCoreBundle/page/_footer.html.twig

# Create favicon
#convert -background none assets/icons/icon.svg -define icon:auto-resize=16,32,48 assets/icons/favicon.ico
# Advice
# use https://realfavicongenerator.net and erase in `templates/bundles/PushwordCoreBundle/base.html.twig` `favicon` block

# Install assets for the default theme
#yarn
#yarn encore dev

# Install sqlite by default

sed -i -e "s/DATABASE_URL=\".*\"/DATABASE_URL=\"sqlite:\/\/\/%kernel\.project_dir%\/var\/app\.db\"/" .env

## Install default routes
echo -e "pushword:\n    resource: '@PushwordCoreBundle/Resources/config/routes/all.yaml'" >config/routes.yaml

# Create Database:
php bin/console doctrine:schema:create
php bin/console doctrine:fixtures:load

# Add an admin user :
read -p 'Email: ' emailvar
read -sp 'Password: ' passvar
php bin/console pushword:user:create $emailvar $passvar ROLE_SUPER_ADMIN
#php bin/console pushword:user:create admin@example.tld P@ssword ROLE_SUPER_ADMIN

# Install Bundle Assets
php bin/console assets:install

# Create a robots.txt
#echo '' >public/robots.txt

# Launch Server and Play
read -p "Launch Server and play? [Y/n] " -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]
then
    symfony server:start -d
fi
